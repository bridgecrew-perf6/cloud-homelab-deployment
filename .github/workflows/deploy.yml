name: deploy
on: [workflow_dispatch]

jobs:
  aws:
    name: Deploy To AWS
    environment:
      name: aws
    runs-on: ubuntu-latest

    steps:
    - uses: hashicorp/setup-terraform@v1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get State
      run: |
        cd terraform
        aws s3 sync s3://horvatic-bucket .

    - name: Save Secrets
      env: 
        VPC_ID: ${{ secrets.AWS_VPC_ID }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
        SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
        REGION: ${{ secrets.AWS_REGION }}
      run: |
          envsubst < terraform/main.tf > tempsecret
          cat tempsecret > terraform/main.tf
          envsubst < terraform/cluster.tf > tempsecret
          cat tempsecret > terraform/cluster.tf
          envsubst < terraform/services.tf > tempsecret
          cat tempsecret > terraform/services.tf
          envsubst < terraform/tasks.tf > tempsecret
          cat tempsecret > terraform/tasks.tf
          rm tempsecret

    - name: Terraform Init
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform init

    - name: Terraform Apply
      env:
        TF_ACTION_WORKING_DIR: 'terraform'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          cd terraform
          terraform apply -auto-approve

    - name: Publish State
      run: |
        aws s3 sync terraform s3://horvatic-bucket --exclude "*" --include "terraform.tfstate"

    - name: Update API Gateway
      env:
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLUSTER_NAME: ${{ secrets.AWS_CLUSTER_NAME }}
      run: |
        SERVICE_NAME="nginx"

        TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME"  --service-name "$SERVICE_NAME" --query 'taskArns[0]' --output text)
        TASK_DETAILS=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --task "${TASK_ARN}" --query 'tasks[0].attachments[0].details')
        ENI=$(echo $TASK_DETAILS | jq -r '.[] | select(.name=="networkInterfaceId").value')
        IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        if aws apigatewayv2 get-apis | grep -q "$SERVICE_NAME"; then
          APIS=$(aws apigatewayv2 get-apis)
          APIID=$(echo $APIS | jq -r --arg SERVICE_NAME "$SERVICE_NAME" '.Items[] | select((.Name|tostring) == $SERVICE_NAME).ApiId')
          aws apigatewayv2 update-api --api-id "${APIID}" --name nginx --target "http://${IP}"
        else
          aws apigatewayv2 create-api --name nginx --protocol-type HTTP --target "http://${IP}"
        fi